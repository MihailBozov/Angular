{"ast":null,"code":"import { environment } from 'src/environments/environment.development';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ApiService {\n  constructor(http) {\n    this.http = http;\n  }\n  getThemes() {\n    return this.http.get(`${environment.apiUrl}/themes`);\n  }\n  getTheme(id) {\n    return this.http.get(`${environment.apiUrl}/themes/${id}`);\n  }\n  createTheme(themeName, postText) {\n    return this.http.post(`${environment.apiUrl}/themes`, {\n      themeName,\n      postText\n    });\n  }\n  getPosts(limit) {\n    return limit ? this.http.get(`${environment.apiUrl}/posts?limit=${limit}`) : this.http.get(`${environment.apiUrl}/posts`);\n  }\n  static #_ = this.ɵfac = function ApiService_Factory(t) {\n    return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApiService,\n    factory: ApiService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["environment","ApiService","constructor","http","getThemes","get","apiUrl","getTheme","id","createTheme","themeName","postText","post","getPosts","limit","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["E:\\Code\\Angular\\Angular\\workshop-forms\\my-app\\src\\app\\services\\api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment.development';\r\nimport { Observable } from 'rxjs';\r\nimport { Theme } from '../types/theme';\r\nimport { Post } from '../types/post';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ApiService {\r\n  \r\n  constructor(private http: HttpClient) {}\r\n\r\n  getThemes(): Observable<Theme[]> {\r\n    return this.http.get<Theme[]>(`${environment.apiUrl}/themes`);\r\n  }\r\n  \r\n  getTheme(id: string): Observable<Theme> {\r\n  \r\n    return this.http.get<Theme>(`${environment.apiUrl}/themes/${id}`)\r\n  }\r\n\r\n  createTheme(themeName: string, postText: string): Observable<Theme> {\r\n    return this.http.post<Theme>(`${environment.apiUrl}/themes`, { themeName, postText }); \r\n  }\r\n  \r\n  \r\n  getPosts(limit?: number): Observable<Post[]> {\r\n    return limit\r\n      ? this.http.get<Post[]>(`${environment.apiUrl}/posts?limit=${limit}`)\r\n      : this.http.get<Post[]>(`${environment.apiUrl}/posts`);\r\n  }\r\n}\r\n"],"mappings":"AAEA,SAASA,WAAW,QAAQ,0CAA0C;;;AAQtE,OAAM,MAAOC,UAAU;EAErBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAe;EAEvCC,SAASA,CAAA;IACP,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAU,GAAGL,WAAW,CAACM,MAAM,SAAS,CAAC;EAC/D;EAEAC,QAAQA,CAACC,EAAU;IAEjB,OAAO,IAAI,CAACL,IAAI,CAACE,GAAG,CAAQ,GAAGL,WAAW,CAACM,MAAM,WAAWE,EAAE,EAAE,CAAC;EACnE;EAEAC,WAAWA,CAACC,SAAiB,EAAEC,QAAgB;IAC7C,OAAO,IAAI,CAACR,IAAI,CAACS,IAAI,CAAQ,GAAGZ,WAAW,CAACM,MAAM,SAAS,EAAE;MAAEI,SAAS;MAAEC;IAAQ,CAAE,CAAC;EACvF;EAGAE,QAAQA,CAACC,KAAc;IACrB,OAAOA,KAAK,GACR,IAAI,CAACX,IAAI,CAACE,GAAG,CAAS,GAAGL,WAAW,CAACM,MAAM,gBAAgBQ,KAAK,EAAE,CAAC,GACnE,IAAI,CAACX,IAAI,CAACE,GAAG,CAAS,GAAGL,WAAW,CAACM,MAAM,QAAQ,CAAC;EAC1D;EAAC,QAAAS,CAAA,G;qBAtBUd,UAAU,EAAAe,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAVnB,UAAU;IAAAoB,OAAA,EAAVpB,UAAU,CAAAqB,IAAA;IAAAC,UAAA,EAFT;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}